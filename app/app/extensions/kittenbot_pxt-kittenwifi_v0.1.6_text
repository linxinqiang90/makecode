{
  "pxt.json": "{\n    \"name\": \"kittenwifi\",\n    \"version\": \"0.1.6\",\n    \"description\": \"Extension for Kittenbot Wifi module\",\n    \"license\": \"MIT\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"README.md\",\n        \"main.cpp\",\n        \"main.ts\",\n        \"_locales/zh/kittenwifi-strings.json\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true\n}\n",
  "README.md": "# kittenwifi\n\nExtension for Kittenbot Wifi module\n\n## Feature\n\n- Control wifi access from microbit\n- MQTT control, subscribe publish from microbit\n- RESTFul PUT/GET request to online services, like IFTTT, thingspeak and so on\n- UDP communication with other microbits in LAN\n\n\n----------\n\n## License\n\nMIT\n\n## Supported targets\n\n* for PXT/microbit\n(The metadata above is needed for package search.)\n\n```package\nkittenwifi=github:Kittenbot/pxt-kittenwifi\n```",
  "main.cpp": "#include <stdlib.h>\n#include \"pxt.h\"\n\nusing namespace std;\n\nnamespace kittenwifi {\n\n    //%\n    void setSerialBuffer(int size) {\n        uBit.serial.setRxBufferSize(size);\n        uBit.serial.setTxBufferSize(size);\n    }\n    \n    \n    \n} // namespace kittenwifi\n",
  "main.ts": "/*\r\nRiven\r\nload dependency\r\n\"kittenwifi\": \"file:../pxt-kittenwifi\"\r\n*/\r\n\r\n//% color=\"#31C7D5\" weight=10 icon=\"\\uf1eb\"\r\nnamespace kittenwifi {\r\n    const CMD_SYNC = 1;\r\n    const CMD_RESP_V = 2;\r\n    const CMD_RESP_CB = 3;\r\n    const CMD_WIFISTATUS = 4;\r\n    const CMD_WIFIINFO = 8;\r\n    const CMD_SETHOSTNAME = 9;\r\n    const CMD_MQTT_SETUP = 10;\r\n    const CMD_MQTT_PUB = 11;\r\n    const CMD_MQTT_SUB = 12;\r\n    const CMD_MQTT_SETHOST = 15;\r\n    const CMD_REST_SETUP = 20;\r\n    const CMD_REST_REQ = 21;\r\n    const CMD_REST_RET = 23;\r\n    const CMD_SOCK_SETUP = 40;\r\n    const CMD_SOCK_SEND = 41;\r\n    const CMD_SOCK_DATA = 42;\r\n    const CMD_WIFI_SELECT = 52;\r\n\r\n    export enum Callback {\r\n        WIFI_STATUS_CHANGED = 1,\r\n        MQTT_CONN = 2,\r\n        MQTT_DISCON = 3,\r\n        MQTT_PUB = 4,\r\n        MQTT_DATA = 5,\r\n        UDP_SETUP = 6,\r\n        UDP_DATA = 7\r\n    }\r\n\r\n    const weatherApi = ['tmp', 'fl', 'cond_txt', 'wind_spd', 'hum', 'pcpn', 'pres', 'vis']\r\n    export enum WeatherType {\r\n        //% block=temperature\r\n        tmp = 0,\r\n        //% block=fell_temp\r\n        fl = 1,\r\n        //% block=weather\r\n        cond_txt = 2,\r\n        //% block=wind_speed\r\n        wind_spd = 3,\r\n        //% block=humidity\r\n        hum = 4,\r\n        //% block=rain\r\n        pcpn = 5,\r\n        //% block=pressure\r\n        pres = 6,\r\n        //% block=visibility\r\n        vis = 7\r\n    }\r\n\r\n    type EvtStr = (data: string) => void;\r\n    type EvtAct = () => void;\r\n    type EvtNum = (data: number) => void;\r\n\r\n\r\n    let v: string;\r\n    // no map support for ts over microbit\r\n    let ipAddr: string = '';\r\n\r\n    let mqttCbCnt = 0;\r\n    let mqttCb: EvtStr[] = [null, null, null, null, null, null, null, null];\r\n    let mqttCbKey: string[] = ['', '', '', '', '', '', '', ''];\r\n\r\n    let wifiConn: EvtAct = null;\r\n    let wifiDisconn: EvtAct = null;\r\n\r\n    // no multi udp or restful instance support for microbit\r\n    let udpRxEvt: EvtStr = null;\r\n    let restRxEvt: EvtStr = null;\r\n\r\n    function trim(t: string): string {\r\n        if (t.charAt(t.length - 1) == ' ') {\r\n            t = t.substr(0, t.length - 1)\r\n        }\r\n        return t;\r\n    }\r\n\r\n    function seekNext(space: boolean = true): string {\r\n        for (let i = 0; i < v.length; i++) {\r\n            if ((space && v.charAt(i) == ' ') || v.charAt(i) == '\\r' || v.charAt(i) == '\\n') {\r\n                let ret = v.substr(0, i)\r\n                v = v.substr(i + 1, v.length - i)\r\n                return ret;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n\r\n    /* // no tostring for integer\r\n    function sendCmd(cmdType: number, argc: number, cb: number, extra: string){\r\n        serial.writeString()\r\n    }\r\n    */\r\n\r\n    function parseCallback(cb: number) {\r\n        if (Callback.WIFI_STATUS_CHANGED == cb) {\r\n            let stat = parseInt(seekNext())\r\n            if (stat == 5) {\r\n                serial.writeString(\"WF 10 4 0 2 3 4 5\\n\") // mqtt callback install\r\n                ipAddr = seekNext()\r\n                if (wifiConn) wifiConn()\r\n            } else {\r\n                ipAddr = ''\r\n                if (wifiDisconn) wifiDisconn()\r\n            }\r\n        } else if (Callback.MQTT_DATA == cb) {\r\n            let topic: string = seekNext()\r\n            let data = trim(seekNext(false));\r\n            for (let i = 0; i < 5; i++) {\r\n                let cmp = mqttCbKey[i].compare(topic)\r\n                if (cmp == 0) {\r\n                    mqttCb[i](data)\r\n                    break;\r\n                }\r\n            }\r\n        } else if (Callback.MQTT_CONN == cb) {\r\n            // resubscribe?\r\n            for (let i = 0; i < mqttCbCnt; i++) {\r\n                serial.writeString(\"WF 12 2 0 \" + mqttCbKey[i] + ' 0\\n')\r\n                basic.pause(300)\r\n            }\r\n        }\r\n    }\r\n\r\n    serial.onDataReceived('\\n', function () {\r\n        v = serial.readString()\r\n        let argv: string[] = []\r\n\r\n        if (v.charAt(0) == 'W' && v.charAt(1) == 'F') {\r\n            v = v.substr(3, v.length - 3) + ' '\r\n            let cmd = parseInt(seekNext())\r\n            let argc = parseInt(seekNext())\r\n            let cb = parseInt(seekNext())\r\n\r\n            //  todo: is there an async way to handle response value?\r\n            if (cmd == CMD_RESP_CB) {\r\n                parseCallback(cb)\r\n            } else if (cmd == CMD_SOCK_DATA) {\r\n                let data = trim(seekNext(false));\r\n                if (udpRxEvt) udpRxEvt(data)\r\n            } else if (cmd == CMD_REST_RET) {\r\n                let code = parseInt(seekNext())\r\n                let data = trim(seekNext(false));\r\n                if (restRxEvt) restRxEvt(data)\r\n            }\r\n\r\n        }\r\n    })\r\n\r\n    //% shim=kittenwifi::setSerialBuffer\r\n    function setSerialBuffer(size: number): void {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Wifi connection io init\r\n     * @param tx Tx pin; eg: SerialPin.P1\r\n     * @param rx Rx pin; eg: SerialPin.P2\r\n    */\r\n    //% blockId=wifi_init block=\"Wifi init|Tx pin %tx|Rx pin %rx\"\r\n    //% weight=100\r\n    //% blockGap=50\r\n    export function wifi_init(tx: SerialPin, rx: SerialPin): void {\r\n        serial.redirect(\r\n            tx,\r\n            rx,\r\n            BaudRate.BaudRate115200\r\n        )\r\n        basic.pause(500)\r\n        setSerialBuffer(64);\r\n        serial.readString()\r\n        serial.writeString('\\n\\n')\r\n        basic.pause(1000)\r\n        serial.writeString(\"WF 1 0 1\\n\") // sync command to add wifi status callback\r\n        basic.pause(1000)\r\n        serial.writeString(\"WF 10 4 0 2 3 4 5\\n\") // mqtt callback install\r\n        basic.pause(1000)\r\n    }\r\n\r\n    //% blockId=wifi_join block=\"Wifi Join Aceess Point|%ap Password|%pass\"\r\n    //% weight=98\r\n    export function wifi_join(ap: string, pass: string): void {\r\n        let cmd: string = 'WF 52 2 52 ' + ap + ' ' + pass + '\\n'\r\n        serial.writeString(cmd)\r\n        basic.pause(500) // it may took longer to finshed the ap join process\r\n    }\r\n\r\n    /**\r\n     * Change wifi modules's name\r\n     * @param name New name for wifi; eg: Wifi007\r\n    */\r\n    //% blockId=wifi_changename block=\"Wifi ChangeName %name\"\r\n    //% weight=96\r\n    export function wifi_changename(name: string): void {\r\n        let cmd: string = 'WF 9 1 9 ' + name + '\\n'\r\n        serial.writeString(cmd)\r\n        basic.pause(500)\r\n    }\r\n\r\n    /**\r\n     * On wifi connected\r\n     * @param handler Wifi connected callback\r\n    */\r\n    //% blockId=on_wifi_connected block=\"on Wifi Connected\"\r\n    //% weight=94\r\n    export function on_wifi_connected(handler: () => void): void {\r\n        wifiConn = handler;\r\n    }\r\n\r\n    /**\r\n     * On wifi disconnected\r\n     * @param handler Wifi disconnected callback\r\n    */\r\n    //% blockId=on_wifi_disconnected block=\"on Wifi Disconnected\"\r\n    //% weight=92\r\n    export function on_wifi_disconnected(handler: () => void): void {\r\n        wifiDisconn = handler;\r\n    }\r\n\r\n    //% blockId=wifi_addr block=\"Wifi IP Address\"\r\n    //% weight=91\r\n    //% blockGap=50\r\n    export function wifi_addr(): string {\r\n        return ipAddr;\r\n    }\r\n\r\n\r\n    /**\r\n     * Set MQTT set host\r\n     * @param host Mqtt server ip or address; eg: kittenbot.cn\r\n     * @param clientid Mqtt client id; eg: node01\r\n    */\r\n    //% blockId=mqtt_sethost block=\"MQTT Set Host|%host clientID|%clientid\"\r\n    //% weight=90\r\n    export function mqtt_sethost(host: string, clientid: string): void {\r\n        let cmd: string = 'WF 15 2 15 ' + host + ' ' + clientid + '\\n'\r\n        serial.writeString(cmd)\r\n        basic.pause(1000)\r\n        // reset mqtt handler\r\n        serial.writeString(\"WF 10 4 0 2 3 4 5\\n\") // mqtt callback install\r\n        basic.pause(500)\r\n    }\r\n\r\n    /**\r\n     * Set MQTT set host auth\r\n     * @param host Mqtt server ip or address; eg: kittenbot.cn\r\n     * @param clientid Mqtt client id; eg: node01\r\n    */\r\n    //% blockId=mqtt_sethost_auth block=\"MQTT Set Host|%host clientID|%clientid user|%username pass|%pass\"\r\n    //% weight=90\r\n    export function mqtt_sethost_auth(host: string, clientid: string, username: string, pass: string): void {\r\n        let cmd: string = 'WF 15 4 15 ' + host + ' ' + clientid + ' ' + username + ' ' + pass + '\\n'\r\n        serial.writeString(cmd)\r\n        basic.pause(1000)\r\n        // reset mqtt handler\r\n        serial.writeString(\"WF 10 4 0 2 3 4 5\\n\") // mqtt callback install\r\n        basic.pause(500)\r\n    }\r\n\r\n    /**\r\n     * Set MQTT publish something to topic\r\n     * @param topic Mqtt topic; eg: /hello\r\n     * @param data Mqtt topic data; eg: Helloworld\r\n    */\r\n    //% blockId=mqtt_publish block=\"MQTT publish|%topic|Data %data\"\r\n    //% weight=86\r\n    export function mqtt_publish(topic: string, data: string): void {\r\n        let cmd: string = 'WF 11 4 11 0 0 ' + topic + ' ' + data + '\\n'\r\n        serial.writeString(cmd)\r\n        basic.pause(200) // limit user pub rate\r\n    }\r\n\r\n    /**\r\n     * Set MQTT subscribe\r\n     * @param topic Mqtt topic; eg: /hello\r\n    */\r\n    //% blockId=mqtt_subscribe block=\"MQTT Subscribe %topic\"\r\n    //% weight=84\r\n    export function mqtt_subscribe(topic: string): void {\r\n        serial.writeString(\"WF 12 2 0 \" + topic + ' 0\\n')\r\n        basic.pause(500)\r\n    }\r\n\r\n    /**\r\n     * On MQTT subscribe data callback install\r\n     * @param topic Mqtt topic; eg: /hello\r\n     * @param handler Mqtt topic data callback;\r\n    */\r\n    //% blockId=on_mqtt_data block=\"on Mqtt topic|%topic\"\r\n    //% weight=82\r\n    //% blockGap=50\r\n    export function on_mqtt_data(topic: string, handler: (data: string) => void): void {\r\n        // todo: push may null global definition\r\n        // mqttCb.push(handler)\r\n        // mqttCbKey.push(topic)\r\n        if (mqttCbCnt >= 10) return;\r\n        mqttCb[mqttCbCnt] = handler;\r\n        mqttCbKey[mqttCbCnt] = topic;\r\n        mqttCbCnt++;\r\n    }\r\n\r\n\r\n    /**\r\n     * UDP communication\r\n     * @param addr Remote ip; eg: 192.168.0.100\r\n     * @param port UDP port; eg: 1234\r\n    */\r\n    //% blockId=udp_comm block=\"start UDP Communication ip|%addr port|%port\"\r\n    //% weight=80\r\n    export function udp_comm(addr: string, port: number): void {\r\n        serial.writeString(\"WF 40 3 40 \" + addr + ' ' + port + ' 3\\n')\r\n        basic.pause(500)\r\n    }\r\n\r\n    /**\r\n     * UDP Send\r\n     * @param data UDP data; eg: hello\r\n    */\r\n    //% blockId=udp_send block=\"UDP Send %data\"\r\n    //% weight=78\r\n    export function udp_send(data: string): void {\r\n        serial.writeString(\"WF 41 1 0 \" + data + '\\n')\r\n    }\r\n\r\n    /**\r\n     * on UDP data\r\n     * @param addr Remote ip; eg: 192.168.0.100\r\n    */\r\n    //% blockId=udp_ondata block=\"on UDP data\"\r\n    //% weight=76\r\n    //% blockGap=50\r\n    export function udp_ondata(handler: (udpData: string) => void): void {\r\n        udpRxEvt = handler;\r\n    }\r\n\r\n    /**\r\n     * Set Restful host\r\n     * @param host Host domain name; eg: kittenbot.cn\r\n     * @param port Host port; eg: 80\r\n    */\r\n    //% blockId=rest_host block=\"Rest Host %host port|%port\"\r\n    //% weight=70\r\n    export function rest_host(host: string, port: number): void {\r\n        // todo: support https connection?\r\n        serial.writeString(\"WF 20 3 20 \" + host + \" \" + port + \" 0\\n\")\r\n    }\r\n\r\n    /**\r\n     * Restful request\r\n     * @param method Method in request; eg: GET, POST, PUT\r\n     * @param api API link; eg: /api/test?apple=1\r\n    */\r\n    //% blockId=rest_request block=\"Rest REQ %method api|%api\"\r\n    //% weight=68\r\n    export function rest_request(method: string, api: string): void {\r\n        serial.writeString(\"WF 21 2 0 \" + method + \" \" + api + \"\\n\")\r\n    }\r\n\r\n    //% blockId=rest_weather block=\"Rest Weather %t\"\r\n    //% weight=67\r\n    export function rest_weather(t: WeatherType): void {\r\n        serial.writeString(\"WF 21 2 0 GET /api/iot/weather?location=ip&type=\" + weatherApi[t] + \"\\n\")\r\n    }\r\n\r\n    /**\r\n     * Restful request return\r\n    */\r\n    //% blockId=rest_ret block=\"Rest Return\"\r\n    //% weight=66\r\n    export function rest_ret(handler: (restData: string) => void): void {\r\n        restRxEvt = handler;\r\n    }\r\n}\r\n",
  "_locales/zh/kittenwifi-strings.json": "{\n    \"kittenwifi.wifi_init|block\": \"Wifi 初始化|Tx pin %tx|Rx pin %rx\",\n    \"kittenwifi.wifi_join|block\": \"Wifi 加入路由器|%ap 密码|%pass\",\n    \"kittenwifi.wifi_changename|block\": \"Wifi模块重命名 %name\",\n    \"kittenwifi.on_wifi_connected|block\": \"连接成功\",\n    \"kittenwifi.on_wifi_disconnected|block\": \"连接断开\",\n    \"kittenwifi.wifi_addr|block\": \"Wifi IP地址\",\n    \"kittenwifi.mqtt_sethost|block\": \"MQTT 设置服务器|%host 节点ID|%clientid\",\n    \"kittenwifi.mqtt_sethost_auth|block\": \"MQTT 设置服务器|%host 节点ID|%clientid 用户名|%username 秘钥|%pass\",\n    \"kittenwifi.mqtt_publish|block\": \"MQTT 广播 话题|%topic|内容 %data\",\n    \"kittenwifi.mqtt_subscribe|block\": \"MQTT 订阅话题 %topic\",\n    \"kittenwifi.on_mqtt_data|block\": \"MQtt 收到 话题|%topic\",\n    \"kittenwifi.udp_comm|block\": \"开始UDP通信 ip|%addr 端口|%port\",\n    \"kittenwifi.udp_send|block\": \"UDP 发送 %data\",\n    \"kittenwifi.udp_ondata|block\": \"UDP 收到\",\n    \"kittenwifi.rest_host|block\": \"Rest 服务器 %host 端口|%port\",\n    \"kittenwifi.rest_request|block\": \"Rest 请求 方法|%method api|%api\",\n    \"kittenwifi.rest_ret|block\": \"Rest 返回\",\n    \"kittenwifi.WeatherType.tmp|block\": \"温度\",\n    \"kittenwifi.WeatherType.fl|block\": \"体感温度\",\n    \"kittenwifi.WeatherType.cond_txt|block\": \"天气\",\n    \"kittenwifi.WeatherType.wind_spd|block\": \"风速\",\n    \"kittenwifi.WeatherType.hum|block\": \"湿度\",\n    \"kittenwifi.WeatherType.pcpn|block\": \"降雨\",\n    \"kittenwifi.WeatherType.pres|block\": \"气压\",\n    \"kittenwifi.WeatherType.vis|block\": \"能见度\"\n}",
  "test.ts": "// tests go here; this will not be compiled when this package is used as a library\r\n"
}